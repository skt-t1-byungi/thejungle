@use "sass:math";
@use "sass:meta";
@use "sass:map";
@use "sass:list";

$default-base-size: 16px !default;
$default-dir-shorthand: () !default;
$default-from-screen: 320px !default;
$default-to-screen: 1200px !default;

@function strip-unit($number) {
    @return $number / ($number * 0 + 1);
}

@function pos-shorthand($args, $default: $default-dir-shorthand) {
    $map: meta.keywords($args);
    @if list.length($map) > 0 {
        @return map.merge($default, $map);
    }
    $len: list.length($args);
    @if $len == 0 {
        @return $default;
    }
    $top: list.nth($args, 1);
    @if $len == 1 {
        @return (top: $top, right: $top, bottom: $top, left: $top);
    }
    $right: list.nth($args, 2);
    @if $len == 2 {
        @return (top: $top, right: $right, bottom: $top, left: $right);
    }
    $bottom: list.nth($args, 3);
    @if $len == 3 {
        @return (top: $top, right: $right, bottom: $bottom, left: $right);
    }
    $left: list.nth($args, 4);
    @return (top: $top, right: $right, bottom: $bottom, left: $left);
}

@function em($value, $base: $default-base-size) {
    @if math.is-unitless($value) or math.is-unitless($base) {
        $value: strip-unit($value);
        $base: strip-unit($base);
    }
    @return strip-unit($value / $base) * 1em;
}

@function rem($value, $base: $default-base-size) {
    @if math.is-unitless($value) or math.is-unitless($base) {
        $value: strip-unit($value);
        $base: strip-unit($base);
    }
    @return strip-unit($value / $base) * 1rem;
}

@function between($from-value, $to-value, $from-screen: $default-from-screen, $to-screen: $to-from-screen) {
    $rate: strip-unit(($to-value - $from-value) / ($to-screen - $from-screen));
    $fix: $rate * $from-screen - $from-value;
    @if math.is-unitless($fix) {
        $fix: $fix * 1px;
    }
    @return calc(#{$rate * 100}vw - #{$fix});
}

@mixin size($width, $hight: $width) {
    width: $width;
    height: $hight;
}

@mixin ellipsis($max-width) {
    display: inline-block;
    max-width: $max-width;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin clearfix {
    &::after {
        content: '';
        display: block;
        clear: both;
    }
}

@mixin stretch($args...) {
    $map: pos-shorthand(
        $args,
        (
            top: 0,
            right: 0,
            bottom: 0,
            left: 0,
        )
    );
    position: absolute;
    top: map.get($map, 'top');
    right: map.get($map, 'right');
    bottom: map.get($map, 'bottom');
    left: map.get($map, 'left');
}

@mixin triangle($direction, $color, $width, $height: $width/2) {
    border-style: solid;
    height: 0;
    width: 0;
    @if ($direction == top) {
        border-color: transparent transparent $color transparent;
        border-width: 0 ($width/2) $height ($width/2);
    }
    @if ($direction == bottom) {
        border-color: $color transparent transparent transparent;
        border-width: $height ($width/2) 0 ($width/2);
    }
    @if ($direction == right) {
        border-color: transparent transparent transparent $color;
        border-width: ($height/2) 0 ($height/2) $width;
    }
    @if ($direction == left) {
        border-color: transparent $color transparent transparent;
        border-width: ($height/2) $width ($height/2) 0;
    }
    @if ($direction == top-left) {
        border-color: $color transparent transparent transparent;
        border-width: $height $width 0 0;
    }
    @if ($direction == top-right) {
        border-color: transparent $color transparent transparent;
        border-width: 0 $width $height 0;
    }
    @if ($direction == bottom-left) {
        border-color: transparent transparent transparent $color;
        border-width: $height 0 0 $width;
    }
    @if ($direction == bottom-right) {
        border-color: transparent transparent $color transparent;
        border-width: 0 0 $height $width;
    }
}

@mixin text-hide() {
    overflow: hidden;
    text-indent: -9999px;
}

@mixin column($count, $gap, $fix: 0) {
    width: calc(#{math.percentage(1 / $count)} - #{$gap * (1 - 1 / $count)});
    &:not(:nth-child(#{$count}n)) {
        margin-right: $gap + $fix;
    }
}

@mixin animate($options, $hash: unique_id()) {
    $name: THE_JUNGLE__ANIMATE__#{$hash};
    animation: $name $options;
    @keyframes #{$name} {
        @content;
    }
}
