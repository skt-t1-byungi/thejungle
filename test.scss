@use './node_modules/sass-true' as *;
@use './index.scss' as tj;

@include describe('fn') {
    @include it('em') {
        @include assert {
            @include output {
                .a {
                    font-size: tj.em(12px);
                    .b {
                        font-size: tj.em(10px, 12px);
                    }
                }
            }
            @include expect {
                .a {
                    font-size: 0.75em;
                }
                .a .b {
                    font-size: 0.8333333333em;
                }
            }
        }
    }
    @include it('rem') {
        @include assert {
            @include output {
                .a {
                    font-size: tj.rem(12px);
                    .b {
                        font-size: tj.rem(10px, 12px);
                    }
                }
            }
            @include expect {
                .a {
                    font-size: 0.75rem;
                }
                .a .b {
                    font-size: 0.8333333333rem;
                }
            }
        }
    }

    @include it('between') {
        @include assert {
            @include output {
                .a {
                    font-size: tj.between(10px, 100px, 400px, 1000px);
                }
            }
            @include expect {
                .a {
                    font-size: calc(15vw - 50px);
                }
            }
        }
    }
}

@include describe('mixin') {
    @include it('size') {
        @include assert {
            @include output {
                .a {
                    @include tj.size(50px);
                }
            }
            @include expect {
                .a {
                    width: 50px;
                    height: 50px;
                }
            }
        }
        @include assert {
            @include output {
                .a {
                    @include tj.size(50px, 100px);
                }
            }
            @include expect {
                .a {
                    width: 50px;
                    height: 100px;
                }
            }
        }
    }

    @include it('text-hide') {
        @include assert {
            @include output {
                .a {
                    @include tj.text-hide();
                }
            }
            @include expect {
                .a {
                    overflow: hidden;
                    text-indent: -9999px;
                }
            }
        }
    }

    @include it('ellipsis') {
        @include assert {
            @include output {
                .a {
                    @include tj.ellipsis(100px);
                }
            }
            @include expect {
                .a {
                    display: inline-block;
                    max-width: 100px;
                    white-space: nowrap;
                    overflow: hidden;
                    text-overflow: ellipsis;
                }
            }
        }
    }

    @include it('clearfix') {
        @include assert {
            @include output {
                .a {
                    @include tj.clearfix;
                }
            }
            @include expect {
                .a::after {
                    content: '';
                    display: block;
                    clear: both;
                }
            }
        }
    }

    @include it('stretch') {
        @include assert {
            @include output {
                .a {
                    @include tj.stretch;
                }
            }
            @include expect {
                .a {
                    position: absolute;
                    top: 0;
                    right: 0;
                    bottom: 0;
                    left: 0;
                }
            }
        }
        @include assert {
            @include output {
                .a {
                    @include tj.stretch(10px);
                }
            }
            @include expect {
                .a {
                    position: absolute;
                    top: 10px;
                    right: 10px;
                    bottom: 10px;
                    left: 10px;
                }
            }
        }
        @include assert {
            @include output {
                .a {
                    @include tj.stretch(10px, 50px);
                }
            }
            @include expect {
                .a {
                    position: absolute;
                    top: 10px;
                    right: 50px;
                    bottom: 10px;
                    left: 50px;
                }
            }
        }
        @include assert {
            @include output {
                .a {
                    @include tj.stretch(10px, 50px, 100px);
                }
            }
            @include expect {
                .a {
                    position: absolute;
                    top: 10px;
                    right: 50px;
                    bottom: 100px;
                    left: 50px;
                }
            }
        }
        @include assert {
            @include output {
                .a {
                    @include tj.stretch(10px, 50px, 100px, 200px);
                }
            }
            @include expect {
                .a {
                    position: absolute;
                    top: 10px;
                    right: 50px;
                    bottom: 100px;
                    left: 200px;
                }
            }
        }
    }

    @include it('triangle') {
        @include assert {
            @include output {
                .a {
                    @include tj.triangle(top, #000, 30px);
                }
            }
            @include expect {
                .a {
                    border-style: solid;
                    height: 0;
                    width: 0;
                    border-color: transparent transparent #000 transparent;
                    border-width: 0 15px 15px 15px;
                }
            }
        }
    }

    @include it('column') {
        @include assert {
            @include output {
                .a {
                    @include tj.column(4, 10px);
                }
            }
            @include expect {
                .a {
                    width: calc(25% - 7.5px);
                }
                .a:not(:nth-child(4n)) {
                    margin-right: 10px;
                }
            }
        }
        @include assert {
            @include output {
                .a {
                    @include tj.column(4, 10px, -0.001px);
                }
            }
            @include expect {
                .a {
                    width: calc(25% - 7.5px);
                }
                .a:not(:nth-child(4n)) {
                    margin-right: 9.999px;
                }
            }
        }
    }

    @include it('animate') {
        @include assert {
            @include output {
                .a {
                    @include tj.animate(1s infinite, hash) {
                        from {
                            width: 0;
                        }
                        to {
                            width: 100%;
                        }
                    }
                }
            }
            @include expect {
                .a {
                    animation: THE_JUNGLE__ANIMATE__hash 1s infinite;
                }
                @keyframes THE_JUNGLE__ANIMATE__hash {
                    from {
                        width: 0;
                    }
                    to {
                        width: 100%;
                    }
                }
            }
        }
    }
}
